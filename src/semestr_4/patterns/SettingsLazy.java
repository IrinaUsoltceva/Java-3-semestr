package semestr_4.patterns;

public class SettingsLazy {
    //пример ленивого синглетона
    //значение создается только тогда, когда нужно
    /*сингетон, который создает instance только при первом запросе на этот объект
    делают, когда объект дорого создавать, а нужен он далеко не всегда

     */

    private static SettingsLazy instance = null;

    private static SettingsLazy getInstance() {
        //создать объект, если он еще не создан
        if (instance == null)
            instance = new SettingsLazy();
        return instance;
    }

    private SettingsLazy() {
        //дорогое и долгое создание объекта
    }

    /* В плане использования аналогичен Settings, но
    первый не создает объект, если объект не нужен
     */

    /* может плохо сработать, потому что, например, потоки повлияют
    если те же настройки неизменны, то нормально, стараются как раз сделать, чтобы
    то, к чему обращаются потоки, было неизменным. ДАнные внутри настроек потокобезопасны

    однако здесь instance меняется с null на не null, следовательно, если два потока
    одновременно обратятся в начале, когда оно еще null, создастся два объекта, что
    очень нехорошо
     */
}
